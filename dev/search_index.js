var documenterSearchIndex = {"docs":
[{"location":"#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"#Main-interface","page":"Documentation","title":"Main interface","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"sdplr","category":"page"},{"location":"#SDPLRPlus.sdplr","page":"Documentation","title":"SDPLRPlus.sdplr","text":"sdplr(C, As, b, r)\nsdplr(C, As, b, r; kwargs...)\n\nThese functions tackle the following semidefinite program\n\nbeginaligned\n    textminimize_X succeq 0 quad    langle C  X rangle \n    textsubject toquad  langle A_i X rangle = b_i quad forall i in m\n                   X in mathbbR^n times n\nendaligned\n\nby factorizing the solution matrix X as YY^T and solve the following   nonlinear program instead.\n\nbeginaligned\n    textminimizequad    langle C  YY^T rangle \n    textsubject toquad  langle A_i YY^T rangle = b_i quad forall i in m\n                   Y in mathbbR^n times r\nendaligned\n\nArguments\n\nAs is a vector of m constraint matrices A_i of size n times n. There are four types of constraint matrices supported:  \nSparseMatrixCSC for sparse constraints with nnz Theta (n).\nSparseMatrixCOO for super sparse constraints with nnz o(n).\nSymLowRankMatrix for low-rank constraints with form BDB^T. \nDiagonal for diagonal constraints. Consider using SparseMatrixCOO instead if the diagonal matrix is super sparse.\nC is the cost matrix C of size n times n. Currently we support four types mentioned above.\nb is a vector of m right-hand side values b_i.\nr is the initial rank of the solution matrix Y.\n\nOptional arguments\n\nptol: Tolerance for relative primal infeasibility, i.e.\n\nmathcalA(YY^T) - b  (1 + b_2)\n\nThe default value is 10^-2. \n\nobjtol: Tolerance for relative suboptimality, i.e. \n\nlangle C YY^T rangle - langle C X^* rangle  (1 + langle C YY^T rangle)\n\nThe default value is 10^-2. \n\nnumberlbfgsvecs: Number of L-BFGS vectors. The default value is 4.\nfprec: Break one major iteration if the relative change of the    Lagrangian value is smaller than fprec * eps(). The default value    is 10^8, which is for moderate-accuracy solutions (ptol = objtol = 10^-2). \nprior_trace_bound: A trace bound priorly known or estimated.    For example, it is n for max cut. The default value is 10^18.\nσfac: Factor for increasing the smoothing factor sigma   in the augmented Lagrangian. The default value is 20.\nrankupd_tol: Rank update tolerance. After primal infeasibility    reaches ptol and objtol is not reached for rankupd_tol    major iterations, the rank of the solution matrix Y is doubled.   The default value is 4.\nmaxtime: Maximum time in seconds for the optimization. The default    value is 36000. There may be some postprocessing overhead so    the program will not stop exactly at maxtime. If you want to    achieve a hard time limit, use terminal tools.\nprintlevel: Print level. The default value is 1.\nprintfreq: How often to print in seconds. The default value is 600.\nmaxmajoriter: Maximum number of major iterations. The default value    is 10^5.\nmaxiter: Maximum number of total iterations. The default value is 10^7.\ndataset: Dataset name for better tracking progress,    especially when executed parallely. The default value is \"\".\neval_DIMACS_errs: Whether to evaluate DIMACS errors. The default value    is false.\n\n\n\n\n\n","category":"function"},{"location":"#Supported-constraint-types","page":"Documentation","title":"Supported constraint types","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"As mentioned, SDPLRPlus supports semidefinite programs with constraints of type","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Diagonal, \nSparseMatrixCSC, \nSparseMatrixCOO and \nSymLowRankMatrix. ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"SymLowRankMatrix is a type for symmetric low-rank matrices defined in SDPLRPlus.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"SymLowRankMatrix","category":"page"},{"location":"#SDPLRPlus.SymLowRankMatrix","page":"Documentation","title":"SDPLRPlus.SymLowRankMatrix","text":"SymLowRankMatrix{T} <: AbstractMatrix{T}\n\nSymmetric low-rank matrix of the form BDB^T with elements of type T. Besides the diagonal matrix D and the thin matrix B, we also store B^T as Bt. It's because usually B is really thin,  storing Bt doesn't cost too much more storage but will save allocation during computation.\n\n\n\n\n\n","category":"type"},{"location":"#Citing-SDPLRPlus","page":"Documentation","title":"Citing SDPLRPlus","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"SDPLRPlus is introduced in our paper (Huang and Gleich, 2024). If you found it useful in your work, we kindly request you to cite it.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Moreover, SDPLRPlus started as a reproduction of the package  SDPLR which was introduced in (Burer and Monteiro, 2003; Burer and Monteiro, 2005; Burer and Choi, 2006). Please consider citing these papers. ","category":"page"},{"location":"#References","page":"Documentation","title":"References","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Burer, S. and Choi, C. (2006). Computational Enhancements in Low-Rank Semidefinite Programming. Optimization Methods and Software 21, 493–512. Accessed on Mar 21, 2023.\n\n\n\nBurer, S. and Monteiro, R. D. (2003). A Nonlinear Programming Algorithm for Solving Semidefinite Programs via Low-Rank Factorization. Mathematical Programming 95, 329–357. Accessed on Mar 21, 2023.\n\n\n\nBurer, S. and Monteiro, R. D. (2005). Local Minima and Convergence in Low-Rank Semidefinite Programming. Mathematical Programming 103, 427–444. Accessed on Mar 24, 2023.\n\n\n\nHuang, Y. and Gleich, D. F. (2024). Suboptimality bounds for trace-bounded SDPs enable a faster and scalable low-rank SDP solver SDPLR+, arXiv:2406.10407.\n\n\n\n","category":"page"}]
}
